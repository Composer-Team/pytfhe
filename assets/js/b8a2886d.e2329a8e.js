"use strict";(self.webpackChunkpy_tfhe_oss_doc=self.webpackChunkpy_tfhe_oss_doc||[]).push([[6182],{1913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"submodules/pytfhe-cuda","title":"PyTFHE-CUDA","description":"PyTFHE-CUDA is the CUDA backend for Boolean TFHE program execution.","source":"@site/docs/submodules/pytfhe-cuda.md","sourceDirName":"submodules","slug":"/submodules/pytfhe-cuda","permalink":"/pytfhe/docs/submodules/pytfhe-cuda","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/submodules/pytfhe-cuda.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"AIGER Tools","permalink":"/pytfhe/docs/submodules/aiger-tools"},"next":{"title":"PyTFHE-rs","permalink":"/pytfhe/docs/category/pytfhe-rs"}}');var s=t(4848),l=t(8453);const d={sidebar_position:3},r="PyTFHE-CUDA",c={},a=[{value:"Installation",id:"installation",level:2},{value:"System Requirements",id:"system-requirements",level:3},{value:"Required Dependencies",id:"required-dependencies",level:4},{value:"Installing Dependencies",id:"installing-dependencies",level:4},{value:"Installation",id:"installation-1",level:4},{value:"Core TFHE Types",id:"core-tfhe-types",level:2},{value:"Parameters (<code>include/tfhe.h</code>)",id:"parameters-includetfheh",level:3},{value:"Key Types",id:"key-types",level:3},{value:"Graph-Based Evaluation",id:"graph-based-evaluation",level:2},{value:"BTGM Class (<code>include/tfhe_graph.cuh</code>)",id:"btgm-class-includetfhe_graphcuh",level:3},{value:"Batch Class",id:"batch-class",level:3},{value:"Gate Types",id:"gate-types",level:3},{value:"GPU Kernels",id:"gpu-kernels",level:2},{value:"Bootstrapping Operations",id:"bootstrapping-operations",level:3},{value:"Client/Server API Functions",id:"clientserver-api-functions",level:2},{value:"Key Management",id:"key-management",level:3},{value:"Encryption/Decryption",id:"encryptiondecryption",level:3},{value:"File I/O",id:"file-io",level:3},{value:"Usage Example",id:"usage-example",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"pytfhe-cuda",children:"PyTFHE-CUDA"})}),"\n",(0,s.jsxs)(n.p,{children:["PyTFHE-CUDA is the CUDA backend for Boolean TFHE program execution.\nIt can be used as a low-level standalone library, and also by other components in PyTFHE.\nThe implementation is based on ",(0,s.jsx)(n.a,{href:"https://github.com/vernamlab/cuFHE",children:"cuFHE"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.h3,{id:"system-requirements",children:"System Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Linux (tested on Ubuntu/CentOS)"}),"\n",(0,s.jsx)(n.li,{children:"CUDA-compatible GPU"}),"\n",(0,s.jsx)(n.li,{children:"Python 3.6 or later"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"required-dependencies",children:"Required Dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CUDA Toolkit"})," (version 13.0 or compatible)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"pybind11"})," - Python binding generator"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"python3-dev"})," - Python development headers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"clang-15"})," (preferred) or ",(0,s.jsx)(n.strong,{children:"clang"})," - C++ compiler"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CMake 3.12+"})," - Build system"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"installing-dependencies",children:"Installing Dependencies"}),"\n",(0,s.jsx)(n.p,{children:"Ubuntu/Debian"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Install basic dependencies\nsudo apt update\nsudo apt install python3-dev cmake ninja-build\n\n# Install CUDA Toolkit (replace with your preferred version)\n# Follow NVIDIA\'s official installation guide for CUDA 11.8\n\n# Install clang-15 (recommended)\nsudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"\n\n# Install pybind11\npip3 install pybind11\n'})}),"\n",(0,s.jsx)(n.p,{children:"CentOS/RHEL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install basic dependencies  \nsudo yum install python3-devel cmake ninja-build\n\n# Install CUDA Toolkit from NVIDIA repositories\n# Install clang-15 or clang from EPEL/developer repositories\n\n# Install pybind11\npip3 install pybind11\n"})}),"\n",(0,s.jsx)(n.h4,{id:"installation-1",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone https://github.com/jiaaom/pyTFHE-CUDA\ncd pyTFHE-CUDA\n\n# Install directly\npip3 install .\n"})}),"\n",(0,s.jsx)(n.h2,{id:"core-tfhe-types",children:"Core TFHE Types"}),"\n",(0,s.jsxs)(n.h3,{id:"parameters-includetfheh",children:["Parameters (",(0,s.jsx)(n.code,{children:"include/tfhe.h"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The TFHE library uses a ",(0,s.jsx)(n.code,{children:"Param"})," struct to configure cryptographic parameters:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"struct Param {\n    uint32_t lwe_n_;                        // LWE dimension (default: 500)\n    uint32_t tlwe_n_;                       // TLWE dimension (default: 1024)\n    uint32_t tlwe_k_;                       // TLWE rank (default: 1)\n    uint32_t tgsw_decomp_bits_;             // TGSW decomposition bits (default: 10)\n    uint32_t tgsw_decomp_size_;             // TGSW decomposition size (default: 2)\n    uint32_t keyswitching_decomp_bits_;     // Key switching decomp bits (default: 2)\n    uint32_t keyswitching_decomp_size_;     // Key switching decomp size (default: 8)\n    double lwe_noise_;                      // LWE noise level (default: 2^-15)\n    double tlwe_noise_;                     // TLWE noise level (default: 9e-9)\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-types",children:"Key Types"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Private Key (",(0,s.jsx)(n.code,{children:"PriKey"}),")"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contains LWE and TLWE keys for encryption/decryption"}),"\n",(0,s.jsx)(n.li,{children:"Required for client-side operations"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Public Key (",(0,s.jsx)(n.code,{children:"PubKey"}),")"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contains bootstrapping key and key-switching key"}),"\n",(0,s.jsx)(n.li,{children:"Used for homomorphic evaluation on server"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Ciphertext (",(0,s.jsx)(n.code,{children:"Ctxt"}),")"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Encrypts binary plaintexts ",1]}),"\n",(0,s.jsx)(n.li,{children:"Maintains both host and device copies of LWE samples"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Plaintext (",(0,s.jsx)(n.code,{children:"Ptxt"}),")"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simple wrapper for binary messages"}),"\n",(0,s.jsxs)(n.li,{children:["Automatically constrains values to ",1]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"graph-based-evaluation",children:"Graph-Based Evaluation"}),"\n",(0,s.jsxs)(n.h3,{id:"btgm-class-includetfhe_graphcuh",children:["BTGM Class (",(0,s.jsx)(n.code,{children:"include/tfhe_graph.cuh"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"BTGM"})," (Boolean TFHE Graph Manager) class provides graph-based homomorphic evaluation:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Core Methods:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// Initialize CUDA and generate/load keypairs\nvoid init();\nvoid load_keys();\n\n// Build computation graph\nvoid add_ctxt(Batch* batch, int ctxt_id, int value);\nvoid add_gate(Batch* batch, int gate_id, int op_type, int input1, int input2, int output);\nvoid add_lut2(Batch* batch, int lut_value, int input1, int input2, int output, int uid=-1);\n\n// Execute computation\nvoid build_dependency_graph(Batch* batch, bool verbose = false);\nvoid eval(Batch* batch, bool non_blocking);\n\n// Retrieve results\nint get_value(Batch* batch, int ctxt_id);\n\n// Persistence\nvoid save_ctxt(Batch* batch, int ctxt_id, const char* filename);\nvoid reset(Batch* batch);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"batch-class",children:"Batch Class"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Batch"})," class manages GPU graph execution:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CUDA graph representation of operations"}),"\n",(0,s.jsx)(n.li,{children:"Ciphertext storage and device memory management"}),"\n",(0,s.jsx)(n.li,{children:"Dependency tracking between gates"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"gate-types",children:"Gate Types"}),"\n",(0,s.jsxs)(n.p,{children:["The following gate types are supported (defined in ",(0,s.jsx)(n.code,{children:"tfhe_graph.cuh"}),"):"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Gate"}),(0,s.jsx)(n.th,{children:"Internal Op ID"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NAND"}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"Not AND"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OR"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Logical OR"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AND"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Logical AND"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NOR"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"Not OR"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"XOR"}),(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Exclusive OR"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"XNOR"}),(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"Not XOR"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ANDNY"}),(0,s.jsx)(n.td,{children:"6"}),(0,s.jsx)(n.td,{children:"(NOT input1) AND input2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ANDYN"}),(0,s.jsx)(n.td,{children:"7"}),(0,s.jsx)(n.td,{children:"input1 AND (NOT input2)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ORNY"}),(0,s.jsx)(n.td,{children:"8"}),(0,s.jsx)(n.td,{children:"(NOT input1) OR input2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ORYN"}),(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"input1 OR (NOT input2)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NOT"}),(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"Logical NOT"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CONST_0"}),(0,s.jsx)(n.td,{children:"11"}),(0,s.jsx)(n.td,{children:"Constant 0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CONST_1"}),(0,s.jsx)(n.td,{children:"12"}),(0,s.jsx)(n.td,{children:"Constant 1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"COPY"}),(0,s.jsx)(n.td,{children:"13"}),(0,s.jsx)(n.td,{children:"Copy operation"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"gpu-kernels",children:"GPU Kernels"}),"\n",(0,s.jsx)(n.h3,{id:"bootstrapping-operations",children:"Bootstrapping Operations"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Functions:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// Transform bootstrapping key to NTT domain\nvoid BootstrappingKeyToNTT_(const BootstrappingKey* bk,\n                           BootstrappingKeyNTT*& bk_ntt,\n                           CuNTTHandler<>*& ntt_handler,\n                           MemoryDeleter*& bk_ntt_deleter);\n\n// Copy key-switching key to GPU device\nvoid KeySwitchingKeyToDevice_(const KeySwitchingKey* ksk,\n                             KeySwitchingKey*& ksk_dev,\n                             MemoryDeleter*& ksk_dev_deleter);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Memory Transfer:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// Copy ciphertext between host and device\nvoid CtxtCopyH2D(const Ctxt& c, cudaStream_t stream);\nvoid CtxtCopyD2H(const Ctxt& c, cudaStream_t stream);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"clientserver-api-functions",children:"Client/Server API Functions"}),"\n",(0,s.jsx)(n.h3,{id:"key-management",children:"Key Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void SetSeed(uint32_t seed);\nvoid PriKeyGen(PriKey& pri_key);\nvoid PubKeyGen(PubKey& pub_key, const PriKey& pri_key);\nvoid KeyGen(PubKey& pub_key, PriKey& pri_key);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"encryptiondecryption",children:"Encryption/Decryption"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void Encrypt(Ctxt& ctxt, const Ptxt& ptxt, const PriKey& pri_key);\nvoid Encrypt(Ctxt& ctxt, int msg, const PriKey& pri_key);\nvoid Decrypt(Ptxt& ptxt, const Ctxt& ctxt, const PriKey& pri_key);\nint Decrypt(Ctxt& ctxt, const PriKey& pri_key);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"file-io",children:"File I/O"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void WritePriKeyToFile(const PriKey& pri_key, FileName file);\nvoid ReadPriKeyFromFile(PriKey& pri_key, FileName file);\nvoid WritePubKeyToFile(const PubKey& pub_key, FileName file);\nvoid ReadPubKeyFromFile(PubKey& pub_key, FileName file);\nvoid WriteCtxtToFile(const Ctxt& ct, FileName file);\nvoid ReadCtxtFromFile(Ctxt& ct, FileName file);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'#include "tfhe_graph.cuh"\n\n// Initialize CUDA\ninit_cuda();\nBTGM evaluator;\nBatch batch;\n\n// Add ciphertexts\nevaluator.add_ctxt(&batch, 0, 0);  // ctxt[0] = encrypt(0)\nevaluator.add_ctxt(&batch, 1, 1);  // ctxt[1] = encrypt(1)\n\n// Add gates\nevaluator.add_gate(&batch, 0, XOR, 0, 1, 2);  // ctxt[2] = ctxt[0] XOR ctxt[1]\n\n// Build and execute\nevaluator.build_dependency_graph(&batch);\nevaluator.eval(&batch, false);\n\n// Get result\nint result = evaluator.get_value(&batch, 2);  // Should be 1\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var i=t(6540);const s={},l=i.createContext(s);function d(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);