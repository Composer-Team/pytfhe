"use strict";(self.webpackChunkpy_tfhe_oss_doc=self.webpackChunkpy_tfhe_oss_doc||[]).push([[5263],{5325:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"submodules/pytfhe-rs/cli-tools","title":"CLI Tools","description":"PyTFHE-rs provides several command-line tools for circuit synthesis, simulation, and analysis.","source":"@site/docs/submodules/pytfhe-rs/cli-tools.md","sourceDirName":"submodules/pytfhe-rs","slug":"/submodules/pytfhe-rs/cli-tools","permalink":"/pytfhe/docs/submodules/pytfhe-rs/cli-tools","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/submodules/pytfhe-rs/cli-tools.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/pytfhe/docs/submodules/pytfhe-rs/"},"next":{"title":"Python Bindings","permalink":"/pytfhe/docs/submodules/pytfhe-rs/py-bindings"}}');var l=s(4848),r=s(8453);const t={sidebar_position:2},c="CLI Tools",o={},a=[{value:"tnfs_syn - Logic Synthesizer",id:"tnfs_syn---logic-synthesizer",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Options",id:"options",level:3},{value:"Examples",id:"examples",level:3},{value:"Output Files",id:"output-files",level:3},{value:"tnfs_sim - Circuit Simulator",id:"tnfs_sim---circuit-simulator",level:2},{value:"Basic Usage",id:"basic-usage-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Options",id:"options-1",level:3},{value:"Examples",id:"examples-1",level:3},{value:"Input Vector Format",id:"input-vector-format",level:3},{value:"tnfs_asm - Assembly Generator",id:"tnfs_asm---assembly-generator",level:2},{value:"Basic Usage",id:"basic-usage-2",level:3},{value:"Options",id:"options-2",level:3},{value:"Examples",id:"examples-2",level:3},{value:"tnfs_ln - Analysis Tool",id:"tnfs_ln---analysis-tool",level:2},{value:"Basic Usage",id:"basic-usage-3",level:3},{value:"Analysis Types",id:"analysis-types",level:3},{value:"Examples",id:"examples-3",level:3},{value:"Common Options",id:"common-options",level:2},{value:"Configuration Files",id:"configuration-files",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Error Codes",id:"error-codes",level:2},{value:"Batch Processing",id:"batch-processing",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Debugging",id:"debugging",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"cli-tools",children:"CLI Tools"})}),"\n",(0,l.jsx)(n.p,{children:"PyTFHE-rs provides several command-line tools for circuit synthesis, simulation, and analysis."}),"\n",(0,l.jsx)(n.h2,{id:"tnfs_syn---logic-synthesizer",children:"tnfs_syn - Logic Synthesizer"}),"\n",(0,l.jsx)(n.p,{children:"The main synthesis tool that converts FIRRTL circuits to optimized formats."}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cargo run --bin tnfs_syn -- <input_file> [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<input_file>"})," - Path to input FIRRTL file (",(0,l.jsx)(n.code,{children:".fir"})," extension)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--compress"})," - Enable output compression"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--output-dir <DIR>"})," - Specify output directory (default: current directory)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--format <FORMAT>"})," - Output format: ",(0,l.jsx)(n.code,{children:"aiger"})," (default) or ",(0,l.jsx)(n.code,{children:"lut"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--optimize"})," - Enable optimization passes"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--verbose"})," - Verbose output"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Basic synthesis\ncargo run --bin tnfs_syn -- test_files/Adder.lo.fir\n\n# With compression\ncargo run --bin tnfs_syn -- --compress test_files/Sum3D.gates.json\n\n# Specify output format\ncargo run --bin tnfs_syn -- --format lut test_files/Adder.lo.fir\n\n# Enable optimizations\ncargo run --bin tnfs_syn -- --optimize --verbose test_files/Adder.lo.fir\n"})}),"\n",(0,l.jsx)(n.h3,{id:"output-files",children:"Output Files"}),"\n",(0,l.jsx)(n.p,{children:"The synthesizer generates several output files:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<name>.aig"})," - AIGER binary format"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<name>.aag"})," - AIGER ASCII format (if requested)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<name>.lut"})," - LUT assembly format (if LUT backend used)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<name>.gates.json"})," - Gate-level JSON representation"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<name>.dot"})," - GraphViz visualization (if enabled)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"tnfs_sim---circuit-simulator",children:"tnfs_sim - Circuit Simulator"}),"\n",(0,l.jsx)(n.p,{children:"Plaintext simulator for testing circuit functionality."}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage-1",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cargo run --bin tnfs_sim -- <input_file> [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"arguments-1",children:"Arguments"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<input_file>"})," - Path to compiled circuit file (",(0,l.jsx)(n.code,{children:".aig"}),", ",(0,l.jsx)(n.code,{children:".lut"}),", or ",(0,l.jsx)(n.code,{children:".json"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"options-1",children:"Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--compress"})," - Input file is compressed"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inputs <FILE>"})," - Input vector file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--cycles <N>"})," - Number of simulation cycles (default: 1)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--random-inputs"})," - Generate random test inputs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--output-traces"})," - Save signal traces"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--verbose"})," - Detailed simulation output"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Basic simulation\ncargo run --bin tnfs_sim -- test_files/Adder.aig\n\n# With compressed input\ncargo run --bin tnfs_sim -- --compress test_files/Adder.aig.gz\n\n# Multiple cycles with random inputs\ncargo run --bin tnfs_sim -- --cycles 100 --random-inputs test_files/Sum3D.aig\n\n# Custom input vectors\ncargo run --bin tnfs_sim -- --inputs vectors.txt test_files/Adder.aig\n"})}),"\n",(0,l.jsx)(n.h3,{id:"input-vector-format",children:"Input Vector Format"}),"\n",(0,l.jsx)(n.p,{children:"Input vectors are specified in a text file with one vector per line:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"# Comments start with #\n# Each line represents one simulation cycle\n# Binary values: 0, 1, x (don't care)\n001  # inputs: a=0, b=0, cin=1  \n101  # inputs: a=1, b=0, cin=1\n110  # inputs: a=1, b=1, cin=0\n"})}),"\n",(0,l.jsx)(n.h2,{id:"tnfs_asm---assembly-generator",children:"tnfs_asm - Assembly Generator"}),"\n",(0,l.jsx)(n.p,{children:"Generates human-readable assembly from compiled circuits."}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage-2",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cargo run --bin tnfs_asm -- <input_file> [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"options-2",children:"Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--format <FORMAT>"})," - Output assembly format: ",(0,l.jsx)(n.code,{children:"lut"})," or ",(0,l.jsx)(n.code,{children:"aig"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--optimize"})," - Apply assembly-level optimizations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--annotate"})," - Add comments and annotations"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"examples-2",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Generate LUT assembly\ncargo run --bin tnfs_asm -- --format lut test_files/Adder.lut\n\n# With optimization and annotations\ncargo run --bin tnfs_asm -- --optimize --annotate test_files/Adder.aig\n"})}),"\n",(0,l.jsx)(n.h2,{id:"tnfs_ln---analysis-tool",children:"tnfs_ln - Analysis Tool"}),"\n",(0,l.jsx)(n.p,{children:"Circuit analysis and profiling tool."}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage-3",children:"Basic Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"cargo run --bin tnfs_ln -- <input_file> [OPTIONS]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"analysis-types",children:"Analysis Types"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--gate-count"})," - Count gates by type"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--critical-path"})," - Find critical path delay"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--fanout-analysis"})," - Analyze signal fanout"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--complexity"})," - Circuit complexity metrics"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--schedule-stats"})," - Scheduling statistics"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"examples-3",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Gate count analysis\ncargo run --bin tnfs_ln -- --gate-count test_files/Adder.aig\n\n# Critical path analysis\ncargo run --bin tnfs_ln -- --critical-path test_files/Sum3D.aig\n\n# Complete analysis\ncargo run --bin tnfs_ln -- --gate-count --critical-path --complexity test_files/Adder.aig\n"})}),"\n",(0,l.jsx)(n.h2,{id:"common-options",children:"Common Options"}),"\n",(0,l.jsx)(n.p,{children:"All CLI tools support these common options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--help"})," - Show help message"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--version"})," - Show version information"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--quiet"})," - Suppress non-error output"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--log-level <LEVEL>"})," - Set logging level: ",(0,l.jsx)(n.code,{children:"error"}),", ",(0,l.jsx)(n.code,{children:"warn"}),", ",(0,l.jsx)(n.code,{children:"info"}),", ",(0,l.jsx)(n.code,{children:"debug"}),", ",(0,l.jsx)(n.code,{children:"trace"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,l.jsxs)(n.p,{children:["Tools can read configuration from ",(0,l.jsx)(n.code,{children:"tnfs.toml"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[synthesis]\ndefault_format = "aiger"\nenable_compression = true\noptimization_level = 2\n\n[simulation]\ndefault_cycles = 1000\nrandom_seed = 42\ntrace_signals = true\n\n[output]\nbase_directory = "./output"\nkeep_intermediate = false\n'})}),"\n",(0,l.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TNFS_LOG"})," - Set default log level"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TNFS_CONFIG"})," - Path to configuration file"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"TNFS_TEMP_DIR"})," - Temporary file directory"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"error-codes",children:"Error Codes"}),"\n",(0,l.jsx)(n.p,{children:"CLI tools return standard exit codes:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"0"})," - Success"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"1"})," - General error"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"2"})," - Invalid arguments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"3"})," - File not found"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"4"})," - Parse error"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"5"})," - Compilation error"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"6"})," - Simulation error"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,l.jsx)(n.p,{children:"Use shell scripting for batch processing:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# Process all FIRRTL files in a directory\n\nfor file in circuits/*.fir; do\n    echo "Processing $file"\n    cargo run --bin tnfs_syn -- "$file" --compress\n    \n    # Check if synthesis succeeded\n    if [ $? -eq 0 ]; then\n        echo "\u2713 Successfully processed $file"\n        \n        # Run simulation\n        base=$(basename "$file" .fir)\n        cargo run --bin tnfs_sim -- "${base}.aig" --random-inputs --cycles 100\n    else\n        echo "\u2717 Failed to process $file"\n    fi\ndone\n'})}),"\n",(0,l.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use Release Build"}),": Always use ",(0,l.jsx)(n.code,{children:"cargo build --release"})," for production"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Compression"}),": Enable compression for large circuits to reduce I/O"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Parallel Processing"}),": Process multiple files concurrently"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Memory Usage"}),": Monitor memory usage for very large circuits"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Temporary Files"}),": Clean up intermediate files to save disk space"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,l.jsx)(n.p,{children:"Enable debug output:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Debug synthesis\nRUST_LOG=debug cargo run --bin tnfs_syn -- --verbose test_files/Adder.lo.fir\n\n# Trace-level logging\nRUST_LOG=trace cargo run --bin tnfs_sim -- test_files/Adder.aig\n"})}),"\n",(0,l.jsx)(n.p,{children:"Use visualization for debugging:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Generate GraphViz output\ncargo run --bin tnfs_syn -- --format dot test_files/Adder.lo.fir\n\n# Convert to image\ndot -Tpng Adder.dot -o Adder.png\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);