"use strict";(self.webpackChunkpy_tfhe_oss_doc=self.webpackChunkpy_tfhe_oss_doc||[]).push([[8343],{6188:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"chisel-torch/overview","title":"ChiselTorch Overview","description":"ChiselTorch is a Chisel implementation of a PyTorch-like interface for neural network accelerator generation.","source":"@site/docs/chisel-torch/overview.md","sourceDirName":"chisel-torch","slug":"/chisel-torch/overview","permalink":"/pytfhe/docs/chisel-torch/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/chisel-torch/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"ChiselTorch","permalink":"/pytfhe/docs/category/chiseltorch"},"next":{"title":"Tensor Module","permalink":"/pytfhe/docs/chisel-torch/tensors"}}');var r=i(4848),o=i(8453);const s={sidebar_position:1},a="ChiselTorch Overview",l={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Usage",id:"basic-usage",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"chiseltorch-overview",children:"ChiselTorch Overview"})}),"\n",(0,r.jsx)(n.p,{children:"ChiselTorch is a Chisel implementation of a PyTorch-like interface for neural network accelerator generation."}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Install Java 11+ and SBT (can be via ",(0,r.jsx)(n.a,{href:"https://sdkman.io",children:"SDKMan"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Install Berkeley HardFloat locally by ",(0,r.jsx)(n.code,{children:"git clone"})," and ",(0,r.jsx)(n.code,{children:"sbt publishLocal"})]}),"\n",(0,r.jsxs)(n.li,{children:["Clone ",(0,r.jsx)(n.a,{href:"https://github.com/jiaaom/chisel-torch",children:"ChiselTorch"})]}),"\n",(0,r.jsxs)(n.li,{children:["Generate hardware: ",(0,r.jsx)(n.code,{children:'sbt "runMain chiseltorch.nn.module.SequentialBuild"'})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"// Define a neural network\nval network = new Sequential(Seq(\n    Conv2D(3, 16, (3, 3), 1),     // 3 to 16 channels, 3x3 kernel\n    ReLU(),                        // Activation\n    MaxPool2D((2, 2), 2),         // 2x2 pooling\n    Flatten(),                     // Reshape for linear\n    Linear(784, 10),              // Classification layer\n    ReLU()                        // Final activation\n))(Seq(1, 3, 32, 32))            // 32x32 RGB input\n\n// Generate Verilog\n(new ChiselStage).emitVerilog(network)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);