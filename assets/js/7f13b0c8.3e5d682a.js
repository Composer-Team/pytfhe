"use strict";(self.webpackChunkpy_tfhe_oss_doc=self.webpackChunkpy_tfhe_oss_doc||[]).push([[1347],{8049:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"submodules/pytfhe-rs/pytfhe-rs","title":"Getting Started","description":"The PyTFHE-rs submodule is the swiss army knife of circuit compilation and scheduling for homomorphic encryption circuits.","source":"@site/docs/submodules/pytfhe-rs/pytfhe-rs.md","sourceDirName":"submodules/pytfhe-rs","slug":"/submodules/pytfhe-rs/","permalink":"/pytfhe/docs/submodules/pytfhe-rs/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/submodules/pytfhe-rs/pytfhe-rs.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"PyTFHE-rs","permalink":"/pytfhe/docs/category/pytfhe-rs"},"next":{"title":"CLI Tools","permalink":"/pytfhe/docs/submodules/pytfhe-rs/cli-tools"}}');var t=s(4848),r=s(8453);const l={sidebar_position:1},a="Getting Started",c={},d=[{value:"Key Features",id:"key-features",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"System Requirements",id:"system-requirements",level:3},{value:"Platform-specific Dependencies",id:"platform-specific-dependencies",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Command Line Tools",id:"command-line-tools",level:3},{value:"Circuit Synthesis",id:"circuit-synthesis",level:4},{value:"Circuit Simulation",id:"circuit-simulation",level:4},{value:"Python API",id:"python-api",level:3},{value:"Basic Scheduling",id:"basic-scheduling",level:4},{value:"Testing the Installation",id:"testing-the-installation",level:2},{value:"Rust Tests",id:"rust-tests",level:3},{value:"Python Binding Test",id:"python-binding-test",level:3},{value:"Example Circuit",id:"example-circuit",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,t.jsx)(n.p,{children:"The PyTFHE-rs submodule is the swiss army knife of circuit compilation and scheduling for homomorphic encryption circuits."}),"\n",(0,t.jsx)(n.p,{children:"PyTFHE-rs is a Rust-based toolchain that processes hardware description language inputs and generates optimized execution schedules for encrypted computation.\nIt provides both Rust APIs and Python bindings for flexibility in different environments.\nAlthough can be used standalone, it is one of the necessary support libraries of PyTFHE."}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-format Support"}),": FIRRTL, Yosys JSON, RTLIL input formats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimized Backends"}),": AIGER and LUT output formats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fast Scheduling"}),": Greedy scheduling algorithms for optimal execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python Integration"}),": PyO3-based bindings"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.h3,{id:"system-requirements",children:"System Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Rust toolchain (latest stable)"}),"\n",(0,t.jsx)(n.li,{children:"Python 3.9+ (for Python bindings)"}),"\n",(0,t.jsx)(n.li,{children:"Git with submodules support"}),"\n",(0,t.jsx)(n.li,{children:"Node.js and npm (for tree-sitter grammar)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"platform-specific-dependencies",children:"Platform-specific Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt install patchelf\n\n# RHEL\nsudo dnf install patchelf\n"})}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Build the project\ncargo build --release\n\n# Synthesize a circuit\ncargo run --bin tnfs_syn -- input.fir\n\n# Simulate a circuit\ncargo run --bin tnfs_sim -- input.aig\n\n# Create conda environment\nconda create -n pytfhe python=3.9.13\nconda activate pytfhe\npip install maturin\n\n# Build and install bindings\nmaturin develop\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"command-line-tools",children:"Command Line Tools"}),"\n",(0,t.jsx)(n.h4,{id:"circuit-synthesis",children:"Circuit Synthesis"}),"\n",(0,t.jsx)(n.p,{children:"Convert FIRRTL circuits to optimized formats:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Synthesize to AIGER format\ncargo run --bin tnfs_syn -- test_files/Adder.lo.fir\n\n# With compression\ncargo run --bin tnfs_syn -- --compress test_files/Adder.lo.fir\n"})}),"\n",(0,t.jsx)(n.h4,{id:"circuit-simulation",children:"Circuit Simulation"}),"\n",(0,t.jsx)(n.p,{children:"Run plaintext simulation on compiled circuits:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Simulate AIGER circuit\ncargo run --bin tnfs_sim -- test_files/Adder.aig\n\n# With compression\ncargo run --bin tnfs_sim -- --compress test_files/Adder.aig.gz\n"})}),"\n",(0,t.jsx)(n.h3,{id:"python-api",children:"Python API"}),"\n",(0,t.jsx)(n.h4,{id:"basic-scheduling",children:"Basic Scheduling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import tnfs\n\n# Load circuit data (binary AIGER format)\nwith open('circuit.aig', 'rb') as f:\n    aig_data = f.read()\n\n# Generate execution schedule\nschedule = tnfs.py_greedy_scheduler(aig_data, batch_size=1000)\nprint(f\"Generated {len(schedule)} operations\")\n\n# For LUT-based circuits\nlut_schedule = tnfs.py_lut_greedy_scheduler(lut_data, batch_size=1000)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-the-installation",children:"Testing the Installation"}),"\n",(0,t.jsx)(n.h3,{id:"rust-tests",children:"Rust Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all tests\ncargo test\n\n# Run specific test module\ncargo test scheduler_test\ncargo test simulation_test\n"})}),"\n",(0,t.jsx)(n.h3,{id:"python-binding-test",children:"Python Binding Test"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import tnfs\nprint(tnfs.py_greedy_scheduler)  # Should print function info\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-circuit",children:"Example Circuit"}),"\n",(0,t.jsx)(n.p,{children:"Test with a provided example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Synthesize the adder example\ncargo run --bin tnfs_syn -- test_files/Adder.lo.fir\n\n# Check output files\nls -la Adder.*\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);