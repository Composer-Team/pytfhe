"use strict";(self.webpackChunkpy_tfhe_oss_doc=self.webpackChunkpy_tfhe_oss_doc||[]).push([[8754],{1570:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"PyTFHE Intro","href":"/pytfhe/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Submodules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"PyTFHE-CPU","href":"/pytfhe/docs/submodules/pytfhe-cpu","docId":"submodules/pytfhe-cpu","unlisted":false},{"type":"link","label":"AIGER Tools","href":"/pytfhe/docs/submodules/aiger-tools","docId":"submodules/aiger-tools","unlisted":false},{"type":"link","label":"PyTFHE-CUDA","href":"/pytfhe/docs/submodules/pytfhe-cuda","docId":"submodules/pytfhe-cuda","unlisted":false},{"type":"category","label":"PyTFHE-rs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting Started","href":"/pytfhe/docs/submodules/pytfhe-rs/","docId":"submodules/pytfhe-rs/pytfhe-rs","unlisted":false},{"type":"link","label":"CLI Tools","href":"/pytfhe/docs/submodules/pytfhe-rs/cli-tools","docId":"submodules/pytfhe-rs/cli-tools","unlisted":false},{"type":"link","label":"Python Bindings","href":"/pytfhe/docs/submodules/pytfhe-rs/py-bindings","docId":"submodules/pytfhe-rs/py-bindings","unlisted":false},{"type":"link","label":"Core Modules API Reference","href":"/pytfhe/docs/submodules/pytfhe-rs/core-modules","docId":"submodules/pytfhe-rs/core-modules","unlisted":false},{"type":"link","label":"Dev Guide and Architecture","href":"/pytfhe/docs/submodules/pytfhe-rs/dev-guide","docId":"submodules/pytfhe-rs/dev-guide","unlisted":false}],"href":"/pytfhe/docs/category/pytfhe-rs"},{"type":"category","label":"PyTFHE-Frontend","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"PyTFHE-Frontend Overview","href":"/pytfhe/docs/submodules/pytfhe-frontend/overview","docId":"submodules/pytfhe-frontend/overview","unlisted":false},{"type":"link","label":"XLS IR to TASM Converter","href":"/pytfhe/docs/submodules/pytfhe-frontend/xls-bridge","docId":"submodules/pytfhe-frontend/xls-bridge","unlisted":false},{"type":"link","label":"TFHE Assembly (TASM) Tools","href":"/pytfhe/docs/submodules/pytfhe-frontend/asm-tools","docId":"submodules/pytfhe-frontend/asm-tools","unlisted":false},{"type":"link","label":"Boolean TFHE Program Runner","href":"/pytfhe/docs/submodules/pytfhe-frontend/runner","docId":"submodules/pytfhe-frontend/runner","unlisted":false},{"type":"link","label":"Benchmark Submodule","href":"/pytfhe/docs/submodules/pytfhe-frontend/benchmark","docId":"submodules/pytfhe-frontend/benchmark","unlisted":false}],"href":"/pytfhe/docs/category/pytfhe-frontend"}],"href":"/pytfhe/docs/category/submodules"},{"type":"category","label":"ChiselTorch","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ChiselTorch Overview","href":"/pytfhe/docs/chisel-torch/overview","docId":"chisel-torch/overview","unlisted":false},{"type":"link","label":"Tensor Module","href":"/pytfhe/docs/chisel-torch/tensors","docId":"chisel-torch/tensors","unlisted":false},{"type":"link","label":"Hardware Primitives","href":"/pytfhe/docs/chisel-torch/hw","docId":"chisel-torch/hw","unlisted":false},{"type":"link","label":"Neural Network Modules","href":"/pytfhe/docs/chisel-torch/nn","docId":"chisel-torch/nn","unlisted":false}],"href":"/pytfhe/docs/category/chiseltorch"}]},"docs":{"chisel-torch/hw":{"id":"chisel-torch/hw","title":"Hardware Primitives","description":"The hardware operations package (chiseltorch.hw) provides optimized hardware implementations of fundamental operations used by higher-level neural network modules.","sidebar":"tutorialSidebar"},"chisel-torch/nn":{"id":"chisel-torch/nn","title":"Neural Network Modules","description":"The neural network module package (chiseltorch.nn.module) provides PyTorch-like neural network layers implemented in Chisel for hardware acceleration.","sidebar":"tutorialSidebar"},"chisel-torch/overview":{"id":"chisel-torch/overview","title":"ChiselTorch Overview","description":"ChiselTorch is a Chisel implementation of a PyTorch-like interface for neural network accelerator generation.","sidebar":"tutorialSidebar"},"chisel-torch/tensors":{"id":"chisel-torch/tensors","title":"Tensor Module","description":"The tensor module (chiseltorch.tensor) provides the core tensor abstraction for ChiselTorch, implementing hardware-aware multi-dimensional arrays with PyTorch-like operations.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"PyTFHE Intro","description":"PyTFHE is an end-to-end compilation and execution framework for fully homomorphic encryption (FHE) applications.","sidebar":"tutorialSidebar"},"submodules/aiger-tools":{"id":"submodules/aiger-tools","title":"AIGER Tools","description":"Overview","sidebar":"tutorialSidebar"},"submodules/pytfhe-cpu":{"id":"submodules/pytfhe-cpu","title":"PyTFHE-CPU","description":"Overview","sidebar":"tutorialSidebar"},"submodules/pytfhe-cuda":{"id":"submodules/pytfhe-cuda","title":"PyTFHE-CUDA","description":"PyTFHE-CUDA is the CUDA backend for Boolean TFHE program execution.","sidebar":"tutorialSidebar"},"submodules/pytfhe-frontend/asm-tools":{"id":"submodules/pytfhe-frontend/asm-tools","title":"TFHE Assembly (TASM) Tools","description":"The asm_tools module provides utilities for loading and parsing binary assembly formats used in the PyTFHE system. It handles two main binary formats: TNFS (Threshold Network File System) binary format and LUT (Look-Up Table) binary format. These formats represent compiled circuits in a form optimized for FHE execution.","sidebar":"tutorialSidebar"},"submodules/pytfhe-frontend/benchmark":{"id":"submodules/pytfhe-frontend/benchmark","title":"Benchmark Submodule","description":"The benchmark module provides performance measurement utilities for evaluating FHE (Fully Homomorphic Encryption) operations. It includes both distributed (Ray-based) and serial benchmarking capabilities to measure throughput and latency of various FHE gate operations.","sidebar":"tutorialSidebar"},"submodules/pytfhe-frontend/overview":{"id":"submodules/pytfhe-frontend/overview","title":"PyTFHE-Frontend Overview","description":"Introduction","sidebar":"tutorialSidebar"},"submodules/pytfhe-frontend/runner":{"id":"submodules/pytfhe-frontend/runner","title":"Boolean TFHE Program Runner","description":"The runner module provides the core execution engines for running FHE circuits. It supports multiple execution backends including CPU (serial and Ray distributed), GPU (CUDA), and various FHE libraries (pyTFHE, cuFHE). The module handles scheduling, batching, and parallel execution of FHE operations.","sidebar":"tutorialSidebar"},"submodules/pytfhe-frontend/xls-bridge":{"id":"submodules/pytfhe-frontend/xls-bridge","title":"XLS IR to TASM Converter","description":"The xls_ir2tasm module provides conversion utilities from XLS (Accelerated HLS) Intermediate Representation (IR) to TASM (TFHE Assembly) format. XLS is Google\'s hardware synthesis tool that generates optimized hardware descriptions, and this module bridges XLS output to the PyTFHE execution format.","sidebar":"tutorialSidebar"},"submodules/pytfhe-rs/cli-tools":{"id":"submodules/pytfhe-rs/cli-tools","title":"CLI Tools","description":"PyTFHE-rs provides several command-line tools for circuit synthesis, simulation, and analysis.","sidebar":"tutorialSidebar"},"submodules/pytfhe-rs/core-modules":{"id":"submodules/pytfhe-rs/core-modules","title":"Core Modules API Reference","description":"The core modules and their APIs in PyTFHE-rs.","sidebar":"tutorialSidebar"},"submodules/pytfhe-rs/dev-guide":{"id":"submodules/pytfhe-rs/dev-guide","title":"Dev Guide and Architecture","description":"Developer guide of PyTFHE-rs.","sidebar":"tutorialSidebar"},"submodules/pytfhe-rs/py-bindings":{"id":"submodules/pytfhe-rs/py-bindings","title":"Python Bindings","description":"PyTFHE-rs provides Python bindings via PyO3.","sidebar":"tutorialSidebar"},"submodules/pytfhe-rs/pytfhe-rs":{"id":"submodules/pytfhe-rs/pytfhe-rs","title":"Getting Started","description":"The PyTFHE-rs submodule is the swiss army knife of circuit compilation and scheduling for homomorphic encryption circuits.","sidebar":"tutorialSidebar"}}}}')}}]);